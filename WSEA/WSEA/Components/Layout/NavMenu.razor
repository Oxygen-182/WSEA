@implements IDisposable

@inject NavigationManager NavigationManager

<nav class="navbar navbar-expand-lg navbar-light" style="background-color:rgba(136, 196, 245);">
    <div class="container-fluid">
        <a class="navbar-brand mx-5 d-inline-flex">
            <img src="https://cs14.pikabu.ru/avatars/4788/x4788488-1759863996.png" alt="" width="24" height="24">
            WSEA
        </a>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav">
                <a class="nav-link" aria-current="/" href="#">Главная</a>
                <a class="nav-link" href="/apartments">Квартиры и комнаты</a>
                <a class="nav-link" href="/homes">Дома</a>
                <a class="nav-link" href="/">Земельные участки</a>
                <a class="nav-link" href="/">Коммерция</a>
                <a class="nav-link" href="/feedback">Контактная информация</a>

                <AuthorizeView>
                    <NotAuthorized>
                        <a class="nav-link" href="/Account/Login">Риэлтору</a>
                    </NotAuthorized>
                    <Authorized>
                        <a class="nav-link" href="/newapartment">Добавить недвижимость</a>
                        <a class="nav-link">Добро пожаловать, @context.User.Identity.Name!</a>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
</nav>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

